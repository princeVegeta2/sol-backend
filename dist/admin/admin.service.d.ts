import { UserService } from './../user/user.service';
import { HoldingService } from 'src/holdings/holding.service';
import { EntryService } from 'src/entries/entry.service';
import { ExitService } from 'src/exits/exit.service';
import { SolBalanceService } from 'src/balance/sol_balance.service';
import { StatService } from 'src/stats/stats.service';
export declare class AdminService {
    private readonly userService;
    private readonly holdingService;
    private readonly entryService;
    private readonly exitService;
    private readonly solBalanceService;
    private readonly statService;
    constructor(userService: UserService, holdingService: HoldingService, entryService: EntryService, exitService: ExitService, solBalanceService: SolBalanceService, statService: StatService);
    fetchAllUsers(): Promise<import("../user/user.entity").User[]>;
    fetchAllHoldings(): Promise<import("../holdings/holding.entity").Holding[]>;
    fetchAllEntries(): Promise<void>;
    fetchAllExits(): Promise<import("../exits/exit.entity").Exit[]>;
    fetchAllBalances(): Promise<import("../balance/sol_balance.entity").SolBalance[]>;
    fetchAllStats(): Promise<import("../stats/stats.entity").Stat[]>;
    fetchAllHoldingsByUserId(userId: number): Promise<import("../holdings/holding.entity").Holding[]>;
    fetchAllHoldingsByMintAddress(mintAddress: string): Promise<import("../holdings/holding.entity").Holding[]>;
    fetchAllEntriesByUserId(userId: number): Promise<import("../entries/entry.entity").Entry[]>;
    fetchAllEntriesByMintAddress(mintAddress: string): Promise<import("../entries/entry.entity").Entry[]>;
    fetchAllExitsByUserId(userId: number): Promise<import("../exits/exit.entity").Exit[]>;
    fetchAllExitsByMintAddress(mintAddress: string): Promise<import("../exits/exit.entity").Exit[]>;
    fetchBalanceByUserId(userId: number): Promise<void>;
    fetchStatByUserId(userId: number): Promise<import("../stats/stats.entity").Stat>;
    deleteHoldingsByUserId(userId: number): Promise<void>;
    deleteHoldingsByMintAddress(mintAddress: string): Promise<void>;
    deleteHoldingByUserIdAndMintAddress(userId: number, mintAddress: string): Promise<void>;
    deleteEntriesByUserId(userId: number): Promise<void>;
    deleteEntriesByMintAddress(mintAddress: string): Promise<void>;
    deleteEntriesByUserIdAndMintAddress(userId: number, mintAddress: string): Promise<void>;
    deleteExitsByUserId(userId: number): Promise<void>;
    deleteExitsByMintAddress(mintAddress: string): Promise<void>;
    deleteExitsByUserIdAndMintAddress(userId: number, mintAddress: string): Promise<void>;
    deleteBalanceByUserId(userId: number): Promise<void>;
    deleteStatByUserId(userId: number): Promise<void>;
}
