import { SolanaService } from '../solana/solana.service';
import { CreateEntryDto } from '../entries/entry.dto';
import { CreateExitDto } from 'src/exits/exit.dto';
import { CryptoService } from './crypto.service';
import { SolBalanceService } from 'src/balance/sol_balance.service';
export declare class CryptoController {
    private readonly solanaService;
    private readonly cryptoService;
    private readonly solBalanceService;
    constructor(solanaService: SolanaService, cryptoService: CryptoService, solBalanceService: SolBalanceService);
    getTokenQuote(outputMint: string, amount: string, slippage: string): Promise<any>;
    getSolQuote(outputMint: string, amount: string, slippage: string): Promise<any>;
    getTokenData(mintAddress: string): Promise<any>;
    getTokenPrice(mintAddress: string): Promise<number>;
    getTokenSellPrice(mintAddress: string): Promise<number>;
    getBulkTokenData(mintAddresses: string[]): Promise<any[]>;
    getTokenDecimals(mintAddress: string): Promise<any>;
    createEntry(req: any, createEntryDto: CreateEntryDto): Promise<{
        id: number;
        solBalance: number;
        usdBalance: number;
        mintAddress: string;
        amount: number;
        value_usd: number;
        value_sol: number;
        inValueUsd: any;
        pnl: number;
        price: number;
        marketcap: number;
        liquidity: number;
        source: string;
        name: string;
        ticker: string;
        image: string;
        website: string;
        x_page: string;
        telegram: string;
        createdAt: Date;
        updatedAt: Date;
    }>;
    createExit(req: any, createExitDto: CreateExitDto): Promise<{
        exit: {
            id: number;
            mintAddress: string;
            amount: number;
            value_usd: number;
            value_sol: number;
            price: number;
            marketcap: number;
            liquidity: number;
            pnl: number;
            createdAt: Date;
            updatedAt: Date;
        };
        updatedHolding: {
            id: number;
            mintAddress: string;
            amount: number;
            price: number;
            average_price: number;
            value_usd: number;
            value_sol: number;
            pnl: number;
            createdAt: Date;
            updatedAt: Date;
        };
        stats: {
            totalExits: number;
            currentHoldings: number;
            totalPnl: number;
            realizedPnl: number;
            winrate: number;
            createdAt: Date;
            updatedAt: Date;
        };
        metadata: {
            name: string;
            image: string;
        };
        newBalance: number;
        newBalanceUsd: number;
    }>;
    updateHoldings(req: any): Promise<any[] | {
        holdings: {
            name: string;
            ticker: string;
            image: string;
            website: string;
            xPage: string;
            telegram: string;
            mintAddress: string;
            amount: number;
            price: number;
            average_price: number;
            value_usd: number;
            value_sol: number;
            pnl: number;
            createdAt: Date;
            updatedAt: Date;
        }[];
        errors: {
            mintAddress: string;
            message: string;
        }[];
    }>;
    getBalanceData(req: any): Promise<{
        balance: number;
        balanceUsd: number;
        totalRedeemed: number;
        totalRedeemedUsd: number;
        oneRedeemable: boolean;
        fiveRedeemable: boolean;
        lastOneRedeemedAt: Date;
        lastFiveRedeemedAt: Date;
    }>;
    redeemOneSol(req: any): Promise<import("../balance/sol_balance.entity").SolBalance>;
    redeemFiveSol(req: any): Promise<import("../balance/sol_balance.entity").SolBalance>;
    checkBalanceStatus(req: any): Promise<any>;
    getUserStats(req: any): Promise<{
        tokensPurchased: number;
        totalEntries: number;
        totalExits: number;
        currentHoldings: number;
        totalPnl: number;
        unrealizedPnl: number;
        realizedPnl: number;
        winrate: number;
    }>;
    getUserTransactions(req: any): Promise<({
        ticker: string;
        image: string;
        type: string;
        mintAddress: string;
        amount: number;
        value_usd: number;
        value_sol: number;
        price: number;
        marketcap: number;
        liquidity: number;
        source: string;
        createdAt: Date;
        updatedAt: Date;
    } | {
        ticker: string;
        image: string;
        type: string;
        mintAddress: string;
        amount: number;
        value_usd: number;
        value_sol: number;
        price: number;
        marketcap: number;
        liquidity: number;
        pnl: number;
        createdAt: Date;
        updatedAt: Date;
    })[]>;
    deleteHolding(req: any, mintAddress: string): Promise<void>;
    getUserHoldings(req: any): Promise<{
        name: string;
        ticker: string;
        image: string;
        website: string;
        xPage: string;
        telegram: string;
        mintAddress: string;
        amount: number;
        price: number;
        average_price: number;
        value_usd: number;
        value_sol: number;
        pnl: number;
        createdAt: Date;
        updatedAt: Date;
    }[]>;
    getUserNetworth(req: any): Promise<{
        solNetworth: number;
        usdNetworth: number;
    }>;
}
